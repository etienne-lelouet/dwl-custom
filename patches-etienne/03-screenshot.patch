diff --git a/config.def.h.patchapplied b/config.def.h
index 73f9986..aac51dd 100644
--- a/config.def.h
+++ b/config.def.h
@@ -170,6 +170,9 @@ static const Key keys[] = {
 	TAGKEYS(          XKB_KEY_underscore, XKB_KEY_8,                 7),
 	TAGKEYS(          XKB_KEY_cedilla,    XKB_KEY_9,                 8),
 	{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_Q,          quit,           {0} },
+	{ 0,                         XKB_KEY_Print,          capturecurwin,           {0} },
+	{ WLR_MODIFIER_SHIFT,        XKB_KEY_Print,          capturegeom,             {0} },
+	{ MODKEY,                    XKB_KEY_Print,          capturecurscreen,        {0} },
 
 	/* Ctrl-Alt-Backspace and Ctrl-Alt-Fx used to be handled by X server */
 	{ WLR_MODIFIER_CTRL|WLR_MODIFIER_ALT,XKB_KEY_Terminate_Server, quit, {0} },
diff --git a/dwl.c b/dwl.c
index def2562..242fb51 100644
--- a/dwl.c
+++ b/dwl.c
@@ -251,6 +251,11 @@ static void arrangelayer(Monitor *m, struct wl_list *list,
 static void arrangelayers(Monitor *m);
 static void axisnotify(struct wl_listener *listener, void *data);
 static void buttonpress(struct wl_listener *listener, void *data);
+static void capturecurwin(const Arg *arg);
+static void capturecurscreen(const Arg *arg);
+static void capturegeom(const Arg *arg);
+static void generic_capture(const char *geom, const char *captype);
+static int formatcapturename(char *dest, const char *captype);
 static void chvt(const Arg *arg);
 static void checkidleinhibitor(struct wlr_surface *exclude);
 static void cleanup(void);
@@ -649,6 +654,106 @@ buttonpress(struct wl_listener *listener, void *data)
 			event->time_msec, event->button, event->state);
 }
 
+static int
+formatcapturename(char *dest, const char *captype) {
+  int retval;
+  char timestr[255];
+  char hostname[255];
+  time_t rawtime;
+  struct tm * timeinfo;
+  char *home = getenv("HOME");
+  if (home == NULL) {
+    return -1;
+  }
+    retval = gethostname(hostname, 255);
+  if (retval < 0) {
+    perror("gethostname");
+    return -1;
+  }
+
+  time(&rawtime);
+  timeinfo = localtime (&rawtime);
+  retval = strftime(timestr, 255, "%Y_%b_%d_%A_%H:%m:%S", timeinfo);
+  if (retval < 0) {
+    fputs("failed to format time", stderr);
+    return -1;
+  }
+
+  retval = snprintf(dest, 1024, "%s/Pictures/%s/%s-%s.png", home, hostname, captype, timestr);
+  if (retval < 0) {
+    fputs("failed to format output file name", stderr);
+    return -1;
+  }
+  return 0;
+}
+
+static void
+generic_capture(const char* geom, const char *captype) {
+  int retval;
+  char *executable = "grim";
+  char outputfile[1024];
+  const char *args[5] = {  executable, "-g", geom,  outputfile, NULL };
+  Arg spawnarg = { .v = args };
+  retval = formatcapturename(outputfile, captype);
+  if (retval < 0) {
+    fputs("failed to format capture name", stderr);
+    return;
+  }
+  spawn(&spawnarg);
+}
+
+static void
+capturecurwin(const Arg *arg) {
+  int retval;
+  char geom[255];
+  Client *c = focustop(selmon);
+  if (!c) {
+    return;
+ }
+  retval = snprintf(geom, 255, "%d,%d %dx%d", c->geom.x, c->geom.y, c->geom.width, c->geom.height);
+  if (retval < 0) {
+    fputs("failed to format geometry", stderr);
+    return;
+  }
+  generic_capture(geom, client_get_appid(c));
+}
+
+static void
+capturecurscreen(const Arg *arg) {
+  int retval;
+  char geom[255];
+  Client *c = focustop(selmon);
+  if (!c) {
+    return;
+ }
+  retval = snprintf(geom, 255, "%d,%d %dx%d", selmon->m.x, selmon->m.y, selmon->m.width, selmon->m.height);
+  if (retval < 0) {
+    fputs("failed to format geometry", stderr);
+    return;
+  }
+  generic_capture(geom, "screen");
+}
+
+static void
+capturegeom(const Arg *arg) {
+  int retval;
+  char outputfile[1024];
+  char bashcmd[2048];
+  const char *args[5] = {  "bash", "-c", bashcmd, NULL };
+  Arg spawnarg = { .v = args };
+  retval = formatcapturename(outputfile, "geom");
+  if (retval < 0) {
+    fputs("failed to format capture name", stderr);
+    return;
+  }
+  retval = snprintf(bashcmd, 2048, "grim -g \"$(slurp)\" - | tee %s | wl-copy", outputfile);
+  if (retval < 0) {
+    fputs("failed to format bashcmd", stderr);
+    return;
+  }
+  spawn(&spawnarg);
+}
+
 void
 chvt(const Arg *arg)
 {
